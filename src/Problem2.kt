/**
 * Problem 2
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the
 * first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the
 * even-valued terms.
 */
import org.junit.jupiter.api.Test
import kotlin.test.assertEquals

/**
 * Sums values from a list if they are even-valued
 */
fun sumEvenValued(maxValue: Int): Int {
    val fibonacciList: List<Int> = createFibonacciList(maxValue)
    return fibonacciList.sumBy {
        if (it.rem(2) == 0) {
            it
        } else {
            0
        }
    }
}

/**
 * Create a list with the fibonacci values up to the 'maxValue' defined
 */
fun createFibonacciList(maxValue: Int): List<Int> {
    var term1 = 0
    var term2 = 1
    val list = mutableListOf<Int>()
    while (term1 <= maxValue) {
        val sum = term1 + term2
        if (sum <= maxValue) list.add(sum)
        term1 = term2
        term2 = sum
    }
    return list
}

/**
 * Inner class to run unit tests
 */
internal class TestProblem2 {
    @Test
    fun testSumEvenValues() {
        assertEquals(sumEvenValued(89), 44)
        assertEquals(sumEvenValued(4000000), 4613732)
    }

    @Test
    fun testCreateList() {
        assertEquals(createFibonacciList(89), mutableListOf(1, 2, 3, 5, 8, 13, 21, 34, 55, 89))
    }
}

